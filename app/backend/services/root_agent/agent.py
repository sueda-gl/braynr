from google.adk.agents import SequentialAgent, LlmAgent
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get API key from environment
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY environment variable not found. Please add it to your .env file.")

# --- 1. Define Sub-Agents for Each Pipeline Stage ---

# Clear Explanation Agent
clear_explanation_agent = LlmAgent(
    name="ClearExplanationAgent",
    model="gemini-2.0-flash-001",
    instruction="""
Du bist ein hilfreicher Erklärer von technischen und abstrakten Konzepten.
Der Benutzer hat ein Bild bereitgestellt (was zum Thema führt: {topic}).
Er hat möglicherweise auch eine spezifische Aufforderung gegeben: {user_prompt}.

Basierend auf dem Thema aus dem Bild und geleitet von der Aufforderung des Benutzers (falls vorhanden), gib eine klare und prägnante Erklärung ab, die für ein allgemeines Publikum geeignet ist.
Wenn die user_prompt leer ist oder nicht eindeutig auf die Verfeinerung der Erklärung des Themas anwendbar ist, konzentriere dich primär auf das Thema.
Vermeide Fachbegriffe, es sei denn, sie sind notwendig, und erkläre Begriffe, wenn sie verwendet werden.
Gib nur die Erklärung aus.
""",
    description="Generates clear explanations of topics, guided by user prompts.",
    output_key='explanation'
    # input_keys parameter is not supported and was causing the Pydantic error
    # The agent automatically infers input keys from the placeholders in the instruction template.
)

# Concept Separator Agent
concept_separator_agent = LlmAgent(
    name="ConceptSeparatorAgent",
    model="gemini-2.0-flash-001",
    instruction="""
You are an expert at identifying key components of explanations.
Take the {explanation} and break it down into a list of its fundamental concepts.
Output only the list of concepts as bullet points.
""",
    description="Breaks down explanations into key concepts.",
    output_key='concepts',
)

# Storyboard Creator Agent
storyboard_creator_agent = LlmAgent(
    name="StoryboardCreatorAgent",
    model="gemini-2.0-flash-001",
    instruction="""
You are a storyboard planner.
Given a list of concepts: {concepts}, create an ordered storyboard with visual scenes and brief captions to teach each concept clearly.
Structure it as a list of steps with short titles and descriptions.
""",
    description="Creates a storyboard from a list of concepts.",
    output_key='storyboard',
)

# Storyboard Enhancer Agent
storyboard_enhancer_agent = LlmAgent(
    name="StoryboardEnhancerAgent",
    model="gemini-2.0-flash-001",
    instruction="""
You are a visual storyteller.
Enhance the provided storyboard: {storyboard} by adding narration, transitions, and visual suggestions for each step. You have to clearly state 
which objects are going to appear, how they move and interact and how long they stay on the screen.
Keep it suitable for an animated explainer using Manim.
""",
    description="Improves the storyboard with narration and visuals.",
    output_key='enhanced_storyboard',
)

# Code Generator Agent
code_generator_agent = LlmAgent(
    name="CodeGeneratorAgent",
    model="gemini-2.0-flash-001",
    instruction="""
You are a Manim animation code generator.
Given an enhanced storyboard: {enhanced_storyboard}, write the complete Python code using the Manim library to visualize the content.
Include titles, annotations, and transitions where needed.
Output only the code, enclosed in triple backticks: ```python ... ```
""",
    description="Generates Manim code from a storyboard.",
    output_key='generated_code',
)


# Code Reviewer Agent
# Takes the code generated by the previous agent (read from state) and provides feedback.
code_reviewer_agent = LlmAgent(
    name="CodeReviewerAgent",
    model='gemini-2.0-flash-001',
    instruction="""You are an expert Python Code Reviewer. 
    Your task is to provide constructive feedback on the provided code.

    **Code to Review:**
    ```python
    {generated_code}
    ```

**Review Criteria:**
1.  **Correctness:** Does the code work as intended? Are there logic errors?
2.  **Readability:** Is the code clear and easy to understand? Follows PEP 8 style guidelines?
3.  **Efficiency:** Is the code reasonably efficient? Any obvious performance bottlenecks?
4.  **Edge Cases:** Does the code handle potential edge cases or invalid inputs gracefully?
5.  **Best Practices:** Does the code follow common Python best practices?

**Output:**
Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
If the code is excellent and requires no changes, simply state: "No major issues found."
Output *only* the review comments or the "No major issues" statement.
""",
    description="Reviews code and provides feedback.",
    output_key="review_comments",
)


# Code Refactorer Agent
# Takes the original code and the review comments (read from state) and refactors the code.
code_refactorer_agent = LlmAgent(
    name="CodeRefactorerAgent",
    model='gemini-2.0-flash-001',
    instruction="""You are a Python Code Refactoring AI.
Your goal is to improve the given Python code based on the provided review comments.

  **Original Code:**
  ```python
  {generated_code}
  ```

  **Review Comments:**
  {review_comments}

**Task:**
Carefully apply the suggestions from the review comments to refactor the original code.
If the review comments state "No major issues found," return the original code unchanged.
Ensure the final code is complete, functional, and includes necessary imports and docstrings.

**Output:**
Output *only* the final, refactored Python code block, enclosed in triple backticks (```python ... ```). 
Do not add any other text before or after the code block.
""",
    description="Refactors code based on review comments.",
    output_key="refactored_code",
)


# --- 2. Create the Sequential Orchestration Agent ---

root_agent = SequentialAgent(
    name="root_agent",  # Must be named root_agent for ADK compatibility
    description="Executes a pipeline to generate a Manim animation from a concept.",
    #     instruction="""
    # Follow these steps in order to generate a Manim video from a user-supplied concept:
    # 1. Generate a clear explanation of the topic.
    # 2. Break the explanation into distinct concepts.
    # 3. Create a storyboard to teach those concepts.
    # 4. Enhance the storyboard with narration and visual ideas.
    # 5. Generate Manim code to animate the storyboard.
    # """,
    sub_agents=[
        clear_explanation_agent,
        concept_separator_agent,
        storyboard_creator_agent,
        storyboard_enhancer_agent,
        code_generator_agent,
        code_reviewer_agent,
        code_refactorer_agent
    ],
)
